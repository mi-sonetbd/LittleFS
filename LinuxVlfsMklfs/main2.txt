#include <stdio.h>
#include <string.h>
#include "lfs.h"

// LittleFS configuration
#define BLOCK_SIZE 4096
#define BLOCK_COUNT 1024
#define STORAGE_FILE "littlefs_rx.bin"

// Block device functions
int read_block(const struct lfs_config *c, lfs_block_t block, lfs_off_t offset, void *buffer, lfs_size_t size) {
    FILE *f = fopen(STORAGE_FILE, "rb");
    if (!f) return -1;
    fseek(f, block * BLOCK_SIZE + offset, SEEK_SET);
    fread(buffer, size, 1, f);
    fclose(f);
    return 0;
}

int write_block(const struct lfs_config *c, lfs_block_t block, lfs_off_t offset, const void *buffer, lfs_size_t size) {
    FILE *f = fopen(STORAGE_FILE, "r+b");
    if (!f) return -1;
    fseek(f, block * BLOCK_SIZE + offset, SEEK_SET);
    fwrite(buffer, size, 1, f);
    fclose(f);
    return 0;
}

int erase_block(const struct lfs_config *c, lfs_block_t block) {
    FILE *f = fopen(STORAGE_FILE, "r+b");
    if (!f) return -1;
    fseek(f, block * BLOCK_SIZE, SEEK_SET);
    uint8_t empty[BLOCK_SIZE];
    memset(empty, 0xFF, BLOCK_SIZE);  // Erase means setting to 0xFF
    fwrite(empty, BLOCK_SIZE, 1, f);
    fclose(f);
    return 0;
}

int sync(const struct lfs_config *c) {
    // Nothing to sync as file is closed after each read/write
    return 0;
}

int main() {
    // Initialize storage file if it does not exist
    FILE *f = fopen(STORAGE_FILE, "r+b");
    if (!f) {
        f = fopen(STORAGE_FILE, "w+b");
        uint8_t empty[BLOCK_SIZE * BLOCK_COUNT];
        memset(empty, 0xFF, sizeof(empty));  // Initialize with all 0xFF (erased state)
        fwrite(empty, sizeof(empty), 1, f);
    }
    fclose(f);

    // LittleFS configuration
    struct lfs_config cfg = {
        .read = read_block,
        .prog = write_block,
        .erase = erase_block,
        .sync = sync,
        .read_size = 256,
        .prog_size = 256,
        .block_size = 4096,
        .block_count = 1024,
        .cache_size = 256,
        .lookahead_size = 128,
        .block_cycles = 500,
    };

    lfs_t lfs;

    // Format and mount the filesystem
    lfs_format(&lfs, &cfg);
    lfs_mount(&lfs, &cfg);

//   // Open the file for writing once
//   lfs_file_t file;
//   lfs_file_open(&lfs, &file, "data.txt", LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND);

//   for (int i = 1; i <= 10; i++) {
//       // char text[256];

//       // // Create JSON text like "hello-1", "hello-2", ...
//       // snprintf(text, sizeof(text), "{\"-%d- did\":\"jhp-707\",\"dt\":\"2024-10-9 6:32:46\",\"lat\":\"22.335432\",\"lng\":\"91.869667\",\"spd\":\"0.28\",\"head\":\"0.00\",\"sat\":\"9\",\"sim\":\"2\",\"sig1\":\"21\",\"sig2\":\"24\",\"bat\":\"45\",\"sos\":\"0\",\"tem\":\"0\",\"crg\":\"1\",\"logs\":null}\n", i);

//       // Define a static array of 26 bytes
//       uint8_t static_data[26] = {
//           0x18, 0x0A, 0x0A, 0x15, 0x38, 0xBA,  // Date and time example bytes
//           0x7D, 0xBD, 0x41, 0x26,  // Example latitude bytes (4 bytes as float)
//           0xF2, 0xB4, 0x42, 0x00,  // Example longitude bytes (4 bytes as float)
//           0x00, 0x00, 0x00, 0x00,  // Example speed bytes (4 bytes as float)
//           0x00, 0x00, 0x00, 0x00,  // Example course bytes (4 bytes as float)
//           0x64,  // Number of satellites (100)
//           0x00,  // Battery level (0)
//           0x01   // SOS (1)
//       };
//       // Write the text to the file
//       lfs_file_write(&lfs, &file, static_data, sizeof(static_data));
//       printf("Write Done: %d\n", i);
//   }

//   // Close the file after the loop
//   lfs_file_close(&lfs, &file);



// Static log buffer to store the log data
static uint8_t log_buffer[26] = {
    0x18, 0x0A, 0x0A,   // Date: 2024-10-10
    0x09, 0x39, 0x15,   // Time: 09:57:21
    0x00, 0x00, 0x00, 0x00,   // Latitude: 0.000000 (as float)
    0x00, 0x00, 0x00, 0x00,   // Longitude: 0.000000 (as float)
    0x00, 0x00, 0x00, 0x00,   // Speed: 0.00 km/h (as float, will be modified)
    0x00, 0x00, 0x00, 0x00,   // Course: 0.00 degrees (as float)
    0x00,   // Satellites: 0
    0x64,   // Battery: 100%
    0x00,   // SOS: No
    0x01    // Charger connected: Yes
};



for (int i = 1; i <= 26000; i++) {
    char foldername[10];
    char filename[20];
    char text[256];

    // Determine folder number based on file count (2048 files per folder)
    int folder_num = (i - 1) / 2048 + 1;

    // Create folder name like "1", "2", "3", ...
    snprintf(foldername, sizeof(foldername), "%d", folder_num);

    // Create filename within the folder like "1/1.txt", "1/2.txt", ..., "2/1.txt", ...
    snprintf(filename, sizeof(filename), "%s/%d.txt", foldername, i);

    // Generate file content like "hello-1", "hello-2", ...
    snprintf(text, sizeof(text), "{\"-%d- did\":\"jhp-707\",\"dt\":\"2024-10-9 6:32:46\",\"lat\":\"22.335432\",\"lng\":\"91.869667\",\"spd\":\"0.28\",\"head\":\"0.00\",\"sat\":\"9\",\"sim\":\"2\",\"sig1\":\"21\",\"sig2\":\"24\",\"bat\":\"45\",\"sos\":\"0\",\"tem\":\"0\",\"crg\":\"1\",\"logs\":null}", i);

    // Open the file for writing
    lfs_file_t file;
    lfs_mkdir(&lfs, foldername);  // Ensure the folder is created
    lfs_file_open(&lfs, &file, filename, LFS_O_WRONLY | LFS_O_CREAT);
    lfs_file_write(&lfs, &file, log_buffer, strlen(log_buffer));  // Use text instead of log_buffer
    lfs_file_close(&lfs, &file);

    printf("Write Done: %s\n", filename);
}


    // // Create a file
    // lfs_file_t file;
    // lfs_file_open(&lfs, &file, "hello.txt", LFS_O_WRONLY | LFS_O_CREAT);
    // const char *text = "Hello, LittleFS!";
    // lfs_file_write(&lfs, &file, text, strlen(text));
    // lfs_file_close(&lfs, &file);

    // // Read back the file
    // lfs_file_open(&lfs, &file, "hello.txt", LFS_O_RDONLY);
    // char buffer[20];
    // memset(buffer, 0, sizeof(buffer));
    // lfs_file_read(&lfs, &file, buffer, sizeof(buffer) - 1);
    // lfs_file_close(&lfs, &file);

    // // Print the content read
    // printf("Read from file: %s\n", buffer);

    // Unmount the filesystem
    lfs_unmount(&lfs);

    return 0;
}
